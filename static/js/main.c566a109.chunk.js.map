{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","_e$target$elements","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","fetch","concat","value","sent","json","console","log","main","_this","setState","temp","sys","weather","stop","components_Title","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAWeA,EATD,kBACZC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAAb,sCCKWC,EARF,SAAAC,GAAK,OAChBL,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,EAAME,YACpBP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,OAAOC,YAAY,eAC3CV,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,UAAUC,YAAY,uBAC9CV,EAAAC,EAAAC,cAAA,+BC0BWS,EA9BC,SAAAN,GAAK,OACnBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZE,EAAMO,MAAQP,EAAMQ,SACnBb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACY,IACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBACbE,EAAMO,KADT,KACiBP,EAAMQ,UAI1BR,EAAMS,aACLd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACe,IACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMS,YAAxC,MAGHT,EAAMU,UACLf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACYH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMU,SAAxC,MAGbV,EAAMW,aACLhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,cACaH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMW,cAGtDX,EAAMY,OAASjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBE,EAAMY,MAArC,OCtBdC,EAAU,mCAoEDC,6MAjEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,KAGTd,iDAAa,SAAAe,EAAMC,GAAN,IAAAC,EAAAZ,EAAAC,EAAAY,EAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXR,EAAES,iBADSR,EAEeD,EAAEU,OAAOC,SAA3BtB,EAFGY,EAEHZ,KAAMC,EAFHW,EAEGX,QAFHgB,EAAAE,KAAA,EAGYI,MAAK,qDAAAC,OAC2BxB,EAAKyB,MADhC,KAAAD,OAExBvB,EAAQwB,MAFgB,WAAAD,OAGhBlB,IAND,cAGLO,EAHKI,EAAAS,KAAAT,EAAAE,KAAA,EAQQN,EAASc,OARjB,OAQLb,EARKG,EAAAS,KASXE,QAAQC,IAAIf,GACRA,EAAKgB,KACPC,EAAKC,SAAS,CACZ9B,YAAaY,EAAKgB,KAAKG,KACvBjC,KAAMc,EAAKjB,KACXI,QAASa,EAAKoB,IAAIjC,QAClBE,SAAUW,EAAKgB,KAAK3B,SACpBC,YAAaU,EAAKqB,QAAQ,GAAG/B,YAC7BC,MAAO,KAGT0B,EAAKC,SAAS,CACZ3B,MAAO,2BArBA,yBAAAY,EAAAmB,SAAA1B,oIA2BX,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAC+C,EAAD,OAEFjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACgD,EAAD,CAAM3C,WAAY4C,KAAK5C,aACvBP,EAAAC,EAAAC,cAACkD,EAAD,CACEtC,YAAaqC,KAAK/B,MAAMN,YACxBF,KAAMuC,KAAK/B,MAAMR,KACjBC,QAASsC,KAAK/B,MAAMP,QACpBE,SAAUoC,KAAK/B,MAAML,SACrBC,YAAamC,KAAK/B,MAAMJ,YACxBC,MAAOkC,KAAK/B,MAAMH,qBAtDpBoC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c566a109.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = () => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">Weather Checker</h1>\r\n    <p className=\"title-container__subtitle\">\r\n      Find out Temperature, conditions\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"Enter City\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Enter Country code\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather__info\">\r\n    {props.city && props.country && (\r\n      <p className=\"weather__key\">\r\n        Location:{\" \"}\r\n        <span className=\"weather__value\">\r\n          {props.city}, {props.country}\r\n        </span>\r\n      </p>\r\n    )}\r\n    {props.temperature && (\r\n      <p className=\"weather__key\">\r\n        Temperature:{\" \"}\r\n        <span className=\"weather__value\">{props.temperature} </span>\r\n      </p>\r\n    )}\r\n    {props.humidity && (\r\n      <p className=\"weather__key\">\r\n        Humidity: <span className=\"weather__value\">{props.humidity} </span>\r\n      </p>\r\n    )}\r\n    {props.description && (\r\n      <p className=\"weather__key\">\r\n        Condition: <span className=\"weather__value\">{props.description}</span>\r\n      </p>\r\n    )}\r\n    {props.error && <p className=\"weather__error\">{props.error} </p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"edbb74ffe5b60038c92f8211a17e7a61\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const { city, country } = e.target.elements;\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city.value},${\n        country.value\n      }&APPID=${API_KEY}`\n    );\n    const data = await api_call.json();\n    console.log(data);\n    if (data.main) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        error: \"Please enter the value\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-4 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-xs-8 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}